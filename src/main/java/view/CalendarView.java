package view;

import enums.ModeOfCalendar;
import model.DayModel;
import utils.CalendarUtils;
import utils.HibernateUtil;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

/**
 * Created by PedroAlmeida on 04.07.2017.
 */
public class CalendarView {
    private JButton forwardButton;
    private JPanel mainPanel;
    private JLabel labelMessage;
    private JButton backButton;
    private JComboBox modeComboBox;
    private JPanel dayPanel;
    private JPanel separateDayPanel;
    private JFormattedTextField formattedTextField1;
    private static int COLUMNS = 7;
    private static int ROWS = 7;
    private static int FRAME_WIDTH = 700;
    private static int FRAME_HEIGHT = 700;
    private String[] nameOfDays = {"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"};
    private int startPositionOfButtons = 7;

    public CalendarView() {
        createView();
    }


    public void createView() {
        JFrame frame = new JFrame("Calendar");
        frame.setContentPane(this.mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);
        separateDayPanel.setLayout(new GridLayout(ROWS, COLUMNS));
        for (int j = 0; j < COLUMNS; j++) {
            separateDayPanel.add(new JLabel(nameOfDays[j], SwingConstants.CENTER));
        }
        for (int i = 1; i < ROWS; i++) {
            for (int j = 0; j < COLUMNS; j++) {
                separateDayPanel.add(new JButton(""));
            }
        }
        frame.setVisible(true);
        for (ModeOfCalendar mode : ModeOfCalendar.values()) {
            modeComboBox.addItem(mode);
        }

    }

    public void updateView(String titleOfLabel, ArrayList<DayModel> days) {
        labelMessage.setText(titleOfLabel);
        formattedTextField1.setText(titleOfLabel);
        for (int i = startPositionOfButtons; i < separateDayPanel.getComponentCount(); i++) {
            separateDayPanel.getComponent(i).setVisible(false);
            separateDayPanel.getComponent(i).setForeground(Color.BLACK);
        }
        if (days.size() > 0) {
            int indexOfButton = 0;
            indexOfButton = CalendarUtils.dayOfWeek(days.get(0));
            for (DayModel day : days) {
                JButton curBtn = (JButton) separateDayPanel.getComponent(startPositionOfButtons + indexOfButton);
                curBtn.setVisible(true);
                curBtn.setText(Integer.toString(CalendarUtils.dayOfMonth(day)));
                String note = HibernateUtil.getNoteFromDatabase(day);
                if (note != "") {
                    curBtn.setForeground(Color.RED);
                }
                indexOfButton++;
            }
        }


    }

    public JPanel getSeparateDayPanel() {
        return separateDayPanel;
    }

    public JButton getForwardButton() {
        return forwardButton;
    }

    public JComboBox getModeComboBox() {
        return modeComboBox;
    }

    public JButton getBackButton() {
        return backButton;
    }

    public JFormattedTextField getFormattedTextField1() {
        return formattedTextField1;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 5, new Insets(0, 0, 0, 0), -1, -1));
        labelMessage = new JLabel();
        labelMessage.setText("Label");
        mainPanel.add(labelMessage, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dayPanel = new JPanel();
        dayPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(dayPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        separateDayPanel = new JPanel();
        separateDayPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        dayPanel.add(separateDayPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        forwardButton = new JButton();
        forwardButton.setText(">");
        mainPanel.add(forwardButton, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setText("<");
        mainPanel.add(backButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modeComboBox = new JComboBox();
        modeComboBox.setToolTipText("");
        mainPanel.add(modeComboBox, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        formattedTextField1 = new JFormattedTextField();
        formattedTextField1.setToolTipText("Enter your date for searching");
        mainPanel.add(formattedTextField1, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
